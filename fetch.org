#+TITLE: Fetch
#+AUTHOR: Tanner Babcock
#+EMAIL: babkock@protonmail.com
#+STARTUP: showeverything
#+OPTIONS: toc:nil num:nil
#+DESCRIPTION: My Dotfiles fetch script. Found in my Dotfiles repository.
#+KEYWORDS: dotfiles, gitlab, tanner babcock, tanner, babcock, emacs, github, doom emacs, org mode, org, linux, gnu linux, experimental, void linux, noise
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="solarized-dark.min.css" />
#+HTML_HEAD_EXTRA: <link rel="icon" href="/images/favicon.png" />
#+HTML_HEAD_EXTRA: <link rel="apple-touch-icon" href="/images/apple-touch-icon-180x180.png" />
#+HTML_HEAD_EXTRA: <link rel="icon" href="/images/icon-hires.png" sizes="192x192" />
#+PROPERTY: header-args:sh :tangle :shebang "#!/bin/bash"
#+LANGUAGE: en

This is my Dotfiles fetcher. This script collects configuration files from various places on my machine. This Org document is available in my [[https://gitlab.com/Babkock/Dotfiles][Dotfiles repository]] as well as my [[https://babkock.github.io/configs/fetch.html][GitHub Pages]].

#+BEGIN_EXPORT html
<header>
    <center>
        <ul>
            <li><a href="https://babkock.github.io">Home</a></li>
            <li><a href="https://tannerbabcock.com/home">Website</a></li>
            <li><a href="https://github.com/Babkock" target="_blank">GitHub</a></li>
            <li><a href="https://github.com/Babkock/Babkock.github.io" target="_blank">This Repository</a></li>
            <li><a href="https://gitlab.com/Babkock/" target="_blank">GitLab</a></li>
            <li><a href="https://www.youtube.com/channel/UCdXmrPRUtsl-6pq83x3FrTQ" target="_blank">YouTube</a></li>
        </ul>
    </center>
</header>
#+END_EXPORT

# #+TOC: headlines 2

* Table of Contents :toc:
- [[#system-files][System Files]]
- [[#repo-files][Repo Files]]
- [[#the-code][The Code]]
  - [[#compare-function][Compare Function]]
  - [[#driver][Driver]]
- [[#using][Using]]

* System Files

Here is the first array, listing all the files on the system I'd like to preserve.

#+BEGIN_SRC sh :tangle yes
# Dotfiles fetcher script
system_files=(
  "$HOME/.config/bspwm/bspwmrc"
  "$HOME/.config/bspwm/bspwm.org"
  "$HOME/.ncmpcpp/config"
  "$HOME/.ncmpcpp/bindings"
  "$HOME/.config/polybar/config.ini"
  "$HOME/.config/polybar/config.org"
  "$HOME/.config/sxhkd/sxhkdrc"
  "$HOME/.mozilla/firefox/m7etmxn4.default/chrome/userChrome.css"
  "$HOME/.mozilla/firefox/m7etmxn4.default/chrome/userContent.css"
  "$HOME/.mozilla/firefox/m7etmxn4.default/user.js"
  "$HOME/.vim/bundle/vim-devicons/plugin/webdevicons.vim"
  "$HOME/.config/ranger/plugins/ranger_devicons/devicons.py"
  "$HOME/.gitconfig"
  "/etc/mpd.conf"
  "$HOME/.config/mpv/mpv.conf"
  "$HOME/.config/ranger/rc.conf"
  "$HOME/.config/ranger/rifle.conf"
  "$HOME/.config/ranger/scope.sh"
  "$HOME/.vimrc"
  "$HOME/.config/foot/hyprland.ini"
  "$HOME/.config/foot/foot.org"
  "$HOME/.config/foot/wayfire.ini"
  "$HOME/.config/foot/sway.ini"
  "$HOME/.config/foot/niri.ini"
  #"/usr/share/vim/vim82/syntax/c.vim"
  #"/usr/share/vim/vim82/syntax/php.vim"
  #"$HOME/.xinitrc"
  #"$HOME/.Xresources"
  "$HOME/.zsh.org"
  "$HOME/.zshrc"
  "$HOME/.tmux.conf"
  "$HOME/.doom.d/init.el"
  "$HOME/.doom.d/init.org"
  "$HOME/.doom.d/config.el"
  "$HOME/.doom.d/config.org"
  "$HOME/.doom.d/packages.el"
  #"$HOME/org/elfeed.org"
  "$HOME/.config/qutebrowser/config.py"
  "$HOME/.config/qutebrowser/hyprland.py"
  "$HOME/.config/qutebrowser/niri.py"
  "$HOME/.config/qutebrowser/config.org"
  #"$HOME/.config/qutebrowser/quickmarks"
  #"$HOME/.config/tinyserve/index.html"
  "$HOME/.fonts.conf"
  "$HOME/.config/gtk-2.0/gtkfilechooser.ini"
  "$HOME/.config/gtk-2.0/gtkrc"
  "$HOME/.config/gtk-3.0/settings.ini"
  #"$HOME/.config/dunst/dunstrc"
  "/usr/bin/batnotify"
  "$HOME/bin/hdmi"
  "$HOME/.config/sway/config"
  "$HOME/.config/swayimg/config"
  "$HOME/.config/wayfire.ini"
  "$HOME/.config/waybar/config.org"
  "$HOME/.config/waybar/style.org"
  "$HOME/.config/waybar/sway.json"
  "$HOME/.config/waybar/sway.css"
  "$HOME/.config/waybar/wayfire.json"
  "$HOME/.config/waybar/wayfire.css"
  "$HOME/.config/waybar/hyprland.json"
  "$HOME/.config/waybar/hyprland.css"
  "$HOME/.config/waybar/niri.json"
  "$HOME/.config/waybar/niri.css"
  "$HOME/.config/lf/lfrc"
  "$HOME/.config/lf/preview.sh"
  "$HOME/.config/lf/icons"
  "$HOME/.config/rmpc/config.ron"
  "$HOME/.config/rmpc/notify.sh"
  "$HOME/.config/rmpc/themes/theme.ron"
#  "$HOME/.config/river/init"
  "$HOME/.config/wob/wob.ini"
  "$HOME/.config/wob/labwc.ini"
  "$HOME/.config/wob/sway.ini"
  "$HOME/.config/wob/niri.ini"
  "$HOME/.config/mako/config"
  "$HOME/.config/mako/swayconfig"
  "$HOME/.config/mako/niriconfig"
  "$HOME/.config/hypr/hyprland.conf"
  "$HOME/.config/hypr/hyprlock.conf"
  "$HOME/.config/niri/config.kdl"
  "$HOME/.config/alacritty/alacritty.yml"
  "$HOME/.config/alacritty/sway.yml"
  "$HOME/.config/alacritty/wayfire.yml"
  "$HOME/.config/eww/eww.org"
  "$HOME/.config/eww/eww.yuck"
  "$HOME/.config/eww/eww.scss"
  "$HOME/.config/pipewire/pipewire.conf"
  "$HOME/.config/pipewire/pipewire-pulse.conf"
  "$HOME/.config/pipewire/jack.conf"
  "$HOME/.config/pipewire/client.conf"
  "$HOME/.config/pipewire/client-rt.conf"
)
#+END_SRC

* Repo Files

And here's the second array. This is where those files will be copied to. Notice the absolute paths vs. relative paths.

#+BEGIN_SRC sh :tangle yes
repo_files=(
  "bspwm/bspwmrc"
  "bspwm/README.org"
  "ncmpcpp/config"
  "ncmpcpp/bindings"
  "polybar/config.ini"
  "polybar/README.org"
  "sxhkd/sxhkdrc"
  "firefox/userChrome.css"
  "firefox/userContent.css"
  "user.js"
  "vim/webdevicons.vim"
  "ranger/devicons.py"
  "gitconfig"
  "mpd.conf"
  "mpv.conf"
  "ranger/rc.conf"
  "ranger/rifle.conf"
  "ranger/scope.sh"
  "vimrc"
  "foot/hyprland.ini"
  "foot/README.org"
  "foot/wayfire.ini"
  "foot/sway.ini"
  "foot/niri.ini"
  #"vim/c.vim"
  #"vim/php.vim"
  #"xinitrc"
  #"Xresources"
  "zsh/README.org"
  "zsh/zshrc"
  "tmux.conf"
  "doom.d/init.el"
  "doom.d/init.org"
  "doom.d/config.el"
  "doom.d/README.org"
  "doom.d/packages.el"
#  "elfeed.org"
  "qutebrowser/config.py"
  "qutebrowser/hyprland.py"
  "qutebrowser/niri.py"
  "qutebrowser/README.org"
  #"qutebrowser/quickmarks"
  #"tinyserve/index.html"
  "fonts.conf"
  "gtkfilechooser.ini"
  "gtkrc"
  "settings.ini"
  #"dunstrc"
  "bin/batnotify"
  "bin/hdmi"
  "sway/config"
  "swayimg/config"
  "wayfire.ini"
  "waybar/README.org"
  "waybar/style.org"
  "waybar/sway.json"
  "waybar/sway.css"
  "waybar/wayfire.json"
  "waybar/wayfire.css"
  "waybar/hyprland.json"
  "waybar/hyprland.css"
  "waybar/niri.json"
  "waybar/niri.css"
  "lf/lfrc"
  "lf/preview.sh"
  "lf/icons"
  "rmpc/config.ron"
  "rmpc/notify.sh"
  "rmpc/themes/theme.ron"
#  "river/init"
  "wob/wob.ini"
  "wob/labwc.ini"
  "wob/sway.ini"
  "wob/niri.ini"
  "mako/config"
  "mako/swayconfig"
  "mako/niriconfig"
  "hypr/hyprland.conf"
  "hypr/hyprlock.conf"
  "niri/config.kdl"
  "alacritty/alacritty.yml"
  "alacritty/sway.yml"
  "alacritty/wayfire.yml"
  "eww/README.org"
  "eww/eww.yuck"
  "eww/eww.scss"
  "pipewire/pipewire.conf"
  "pipewire/pipewire-pulse.conf"
  "pipewire/jack.conf"
  "pipewire/client.conf"
  "pipewire/client-rt.conf"
)
#+END_SRC

* The Code

If you want to use this Dotfiles fetcher script, you'd really only have to worry about the contents of those two arrays, and make sure they're in sync.
The rest of the code here should not be modified.

What this script does:

- Compares each config file on the system with its respective copy in the
  repository
- If the file is not in the repository, adds it
- If the files are /different/, copies the system file into the repository,
  replacing the older version, and adds the new file to the staging area
- If the files are the /same/, that means it's up to date, do nothing

** Compare Function

#+BEGIN_SRC sh :tangle yes
compare() {
    if [[ -f "$2" ]]; then
        cmp "$1" "$2" > /dev/null
        result=$?
        if [[ $result == 1 ]]; then
            cp "$1" "$2" > /dev/null
            printf "\e[92;1mChanged -- \e[95m%s\n" "$2"
            git add "$2"
        elif [[ $result == 0 ]]; then
            printf "\e[33mUnchanged -- \e[93m%s\n" "$2"
        fi
    else
        printf "\e[92;1mAdded -- \e[95m%s\n" "$2"
        cp "$1" "$2" > /dev/null
        git add "$2"
    fi
}
#+END_SRC

** Driver

This is the Bash version of a "foreach" loop. The beginning of the driver explains to the user what is going to happen, and asks for their confirmation.

#+BEGIN_SRC sh :tangle yes
printf "\e[93;1mThis script will overwrite the contents of this repository with\n"
printf "\e[93;1mwhatever is in the standard config locations for this user.\n\n"
printf "\e[94;1mIt will also add any changed files to the repo's staging area.\n\n"
printf "\e[91;1mContinue? (Y/N) "
read contin
if [[ $contin == "y" || $contin == "Y" ]]; then
    printf "\e[92;1mContinuing...\n"
    for ((i=0;i<${#system_files[@]};++i)); do
        sys="${system_files[i]}"
        rep="${repo_files[i]}"
        if [[ -f "$sys" ]]; then
            compare "$sys" "$rep"
        else
            continue
        fi
    done
    printf "\e[93;1mFinished fetching\n"
    git add "$0"
    unset compare
    true
else
    printf "\e[91;mFetch cancelled\n"
    unset compare
    false
fi
#+END_SRC

And that's it!

* Using

After typing =./fetch.sh= in your command line, you will see the following output.

#+begin_src
This script will overwrite the contents of this repository with
whatever is in the standard config locations for this user.

It will also add any changed files to the repo's staging area.

Continue? (Y/N)
#+end_src

Simple type "Y" or "y" and then Enter to proceed with the script, or "N" to cancel.

#+BEGIN_EXPORT html
<footer>
    <center>
    <p>Copyright &copy; 2025 Tanner Babcock.</p>
    <p><a href="https://babkock.github.io">Home</a> &nbsp;&bull;&nbsp; <a href="https://github.com/Babkock/Babkock.github.io">This Repository</a> &nbsp;&bull;&nbsp;
    <a href="https://tannerbabcock.com/home">Website</a> &nbsp;&bull;&nbsp;
    <a href="https://gitlab.com/Babkock/Dotfiles">Dotfiles</a> &nbsp;&bull;&nbsp; <a href="https://www.twitch.tv/babkock">Twitch</a></p>
    </center>
</footer>
#+END_EXPORT
